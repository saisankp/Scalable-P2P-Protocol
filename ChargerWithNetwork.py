import time
import socket
import os
import threading

os.system("kill-port 33502")

device_name = "Charger-1"
device_ip = "localhost"
device_port = 33503

discovery_ip = "localhost" 
discovery_port = 33333

knownDevices = {} # devices are stored as device: (ip, port)
forwardingTable = {} # device + "/" + data: address
interestForwards = {} #{} # interest code: address
interestRequests = [] # interest codes generated by this device
dataForwards = {} # interest code: address
requestCode = 0

# bind to device unique port
device_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
device_socket.bind((device_ip, device_port))
print("UDP socket connected")

class DroneChargerNode:
    def __init__(self):
        self.gps = (70,-2) # Latitude, Longitude near TCD
        self.voltage = 0 # Volts
        self.temperature = 10 # Degrees celcius
        self.solar_power_charging_rate = 0 # Wh/m 
        self.usage_status = False
        self.locking_actuator_status = False
        self.fire_alarm_sensor = False
        self.rfid_authenticator_output = None

    def simulate_sensor_data(self): 
            #GPS does not change unless it is being transported
            self.voltage = 17
            #Temperature does not change unless there is a fire/stress on power
            self.solar_power_charging_rate = 960
            #Usage status only changes when it is confirmed to be charging
            #Locking actuator status changes when it is confirmed to have a drone on it
            #Fire alarm sensor doesn't change unless there is a fire
            #RFID Authenticator needs to be implemented for SECURITY/ENCRYPTION later on (after networks stuff)


def discovery():
    while True:
        discovery_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        discovery_message = device_name
        try:
            # Check if port is available
            discovery_socket.bind((discovery_ip, discovery_port))
            discovery_socket.settimeout(1)
            connection_time = time.time()

            # Hold the connection for 2 seconds to listen for incoming discovery messages
            while time.time() - connection_time < 5:
                try:
                    data, sender_address = discovery_socket.recvfrom(1024)
                    knownDevices[data.decode()] = sender_address
                except socket.timeout:
                    continue

            # Close socket to allow other devices to connect
            discovery_socket.close()
        except OSError as e:
            # Send discovery message to the receiver
            device_socket.sendto(discovery_message.encode(), (discovery_ip, discovery_port))
        time.sleep(3)
    

# send an interest packet for a piece of data on a different device
def send_interest_packet(data, device):

    global requestCode
    requestCode = requestCode + 1
    packet = "interest"+"/"+str(device_name)+str(requestCode)+"/"+str(device)+"/"+str(data)

    # check if data is in the forwarding table
    if str(device)+"/"+str(data) in forwardingTable:
            device_socket.sendto(packet.encode(), forwardingTable[str(device)+"/"+str(data)])
            #awaitedAcks[str(device_name)+str(requestCode)] = [packet, time.time()]

    # if not perform flooding
    else:
        for device in knownDevices:
            device_socket.sendto(packet.encode(), knownDevices[device])


def handle_interests(message, address):

    interest_code = message.split('/')[1]
    requested_device = message.split('/')[2]
    requested_data = message.split('/')[3]

    # if this is the requested device, send the info
    if requested_device == device_name:
        send_requested_data(message, address)

    # else forward the packet if it hasnt been already
    elif interest_code not in interestForwards:

        interestForwards[interest_code] = address # add to list of unresolved interests
        print()

        # check if requested data is in forwarding table
        if str(requested_device)+"/"+str(requested_data) in forwardingTable:
            print("sending from table")
            device_socket.sendto(message.encode(), forwardingTable[str(requested_device)+"/"+str(requested_data)])
            #awaitedAcks[interest_code] = [message, time.time()]

        # if not perform flooding
        else:
            for device in knownDevices:
                if knownDevices[device] != address: # dont send the interest back to the sender
                    device_socket.sendto(message.encode(), knownDevices[device])


def handle_data(message, address):

    interest_code = message.split('/')[1]
    requested_device = message.split('/')[2]
    requested_data = message.split('/')[3]

    # add sender to forwarding table
    forwardingTable[str(requested_device)+"/"+str(requested_data)] = address

    # if interest request was made by this device
    if interest_code in interestRequests:
        print("data received")
        del interestRequests[interest_code]

    # if not forward to the correct device
    elif interest_code in interestForwards:
        device_socket.sendto(message.encode(), interestForwards[interest_code])
        #awaitedAcks[interest_code] = [message, time.time()]
        del interestForwards[interest_code]

    # if this data has not been requested perform flooding
    elif interest_code not in dataForwards:
        dataForwards[interest_code] = requested_data
        for device in knownDevices:
                if knownDevices[device] != address: # dont send the interest back to the sender
                    device_socket.sendto(message.encode(), knownDevices[device])


def send_requested_data(message, address):
    interest_code = message.split('/')[1]
    requested_device = message.split('/')[2]
    requested_data = message.split('/')[3]

    data_response = "data"+"/"+str(interest_code)+"/"+str(requested_device)+"/"+str(getattr(charger, requested_data))

    device_socket.sendto(data_response.encode(), address)


def receive_messages():
    while True:
        print("awaiting messages")
        data, sender_address = device_socket.recvfrom(1024)
        print("Received connection: ", sender_address, data.decode())

        # check message is interset request or data
        if data.decode().split('/')[0] == "interest":
            handle_interests(data.decode(), sender_address)

        elif data.decode().split('/')[0] == "data":
            handle_data(data.decode())


charger = DroneChargerNode()

async def test():
    print("test!!!!")

def main():
    sensor_data_thread = threading.Thread(target=charger.simulate_sensor_data)
    discovery_thread = threading.Thread(target=discovery)
    receive_messages_thread = threading.Thread(target=receive_messages)

    sensor_data_thread.start()
    discovery_thread.start()
    receive_messages_thread.start()

if __name__ == "__main__":
    main()
    
