import socket
import threading
import time
import os

os.system("kill-port 33500")

device_name = "ndndevice"
device_ip = "localhost"
device_port = 33500

knownDevices = {'device1': ('127.0.0.1', 33502), 'device2': ('127.0.0.1', 33503)} # device name: adress
forwardingTable = {'device2/data': ('127.0.0.1', 33503)} # device + "/" + data: address
interestForwards = {} #{} # interest code: address
interestRequests = [] # interest codes generated by this device
dataForwards = {} # interest code: address
requestCode = 0


# bind to device unique port
device_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
device_socket.bind((device_ip, device_port))
print("UDP socket connected")


# send an interest packet for a piece of data on a different device
def send_interest_packet(data, device):

    global requestCode
    requestCode = requestCode + 1
    packet = "interest"+"/"+str(requestCode)+"/"+str(device)+"/"+str(data)

    # check if data is in the forwarding table
    if str(device)+"/"+str(data) in forwardingTable:
            device_socket.sendto(packet.encode(), forwardingTable[str(device)+"/"+str(data)])

    # if not perform flooding
    else:
        for device in knownDevices:
            device_socket.sendto(packet.encode(), knownDevices[device])


def handle_interests(message, address):

    interest_code = message.split('/')[1]
    requested_device = message.split('/')[2]
    requested_data = message.split('/')[3]

    # if this is the requested device, send the info
    if requested_device == device_name:
        ##########################
        device_socket.sendto("the requested info".encode(), address)
        ########################

    # else forward the packet if it hasnt been already
    elif interest_code not in interestForwards:

        interestForwards[interest_code] = address # add to list of unresolved interests
        print()

        # check if requested data is in forwarding table
        if str(requested_device)+"/"+str(requested_data) in forwardingTable:
            print("sending from table")
            device_socket.sendto(message.encode(), forwardingTable[str(requested_device)+"/"+str(requested_data)])

        # if not perform flooding
        else:
            for device in knownDevices:
                if knownDevices[device] != address: # dont send the interest back to the sender
                    device_socket.sendto(message.encode(), knownDevices[device])


def handle_data(message, address):

    interest_code = message.split('/')[1]
    requested_device = message.split('/')[2]
    requested_data = message.split('/')[3]

    # add sender to forwarding table
    forwardingTable[str(requested_data)+"/"+str(requested_device)] = address

    # if interest request was made by this device
    if interest_code in interestRequests:
        print("data received")
        del interestRequests[interest_code]

    # if not forward to the correct device
    elif interest_code in interestForwards:
        device_socket.sendto(message.encode(), interestForwards[interest_code])
        del interestForwards[interest_code]

    # if this data has not been requested perform flooding
    elif interest_code not in dataForwards:
        dataForwards[interest_code] = requested_data
        for device in knownDevices:
                if knownDevices[device] != address: # dont send the interest back to the sender
                    device_socket.sendto(message.encode(), knownDevices[device])



def receive_messages():
    print("awaiting messages")
    data, sender_address = device_socket.recvfrom(1024)
    print("Received connection: ", sender_address, data.decode())

    # check message is interset request or data
    if data.decode().split('/')[0] == "interest":
        handle_interests(data.decode(), sender_address)

    elif data.decode().split('/')[0] == "data":
        handle_data(data.decode())


receive_messages()
#send_interest_packet("abc", "device1")
