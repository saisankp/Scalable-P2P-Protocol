import asyncio
import json
import time
import socket
import threading

class DroneNode:
    def __init__(self):
        self.gps = (53, -6) # Latitude, Longitude of TCD
        self.battery_level = 100 # Battery percentage
        self.propeller_speed = 0 # RPM
        self.barometric_pressure = 1013 # hPa (of sea-level)
        self.water_release = False
        self.payload_release = False
        self.speaker_status = False
        self.flashlight_status = False

    def simulate_sensor_data(self): 
            self.gps = (self.gps[0] + 2, self.gps[1] - 1)
            self.battery_level -= 5
            if(self.propeller_speed < 10000):
                self.propeller_speed += 2000
            if(self.barometric_pressure > 920):
                self.barometric_pressure -= 20

async def discovery():
    discovery_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    discovery_message = device_name
    try:
        # Check if port is available
        discovery_socket.bind((discovery_ip, discovery_port))
        discovery_socket.settimeout(1)
        connection_time = time.time()

        # Hold the connection for 2 seconds to listen for incoming discovery messages
        while time.time() - connection_time < 5:
            try:
                data, sender_address = discovery_socket.recvfrom(1024)
                knownDevices[data.decode()] = sender_address
            except socket.timeout:
                 print("Connected to 33333")

        # Close socket to allow other devices to connect
        discovery_socket.close()
    except OSError as e:
        # Send discovery message to the receiver
        device_socket.sendto(discovery_message.encode(), (discovery_ip, discovery_port))
    await asyncio.sleep(3)

device_name = "Drone-1"
device_ip = "localhost"
device_port = 33501

discovery_ip = "localhost" 
discovery_port = 33333

# devices are stored as device: (ip, port)
knownDevices = {}

# bind to device unique port
device_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
device_socket.bind((device_ip, device_port))
print("UDP socket connected")


drone = DroneNode()

async def main():
    while True:
        drone.simulate_sensor_data()
        print(drone.battery_level)
        print(knownDevices)

        await asyncio.gather(discovery(), asyncio.sleep(1))

if __name__ == "__main__":
    asyncio.run(main())




